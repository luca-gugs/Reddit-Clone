function n(a) {
  return a.name.value;
}

function t(a) {
  return a.selectionSet ? a.selectionSet.selections : [];
}

function aa(a, b) {
  var e, f, g, h, c = {}, d = 0;
  if (a.arguments && a.arguments.length) {
    for (e = 0, f = a.arguments.length; e < f; e++) {
      null != (h = valueFromASTUntyped((g = a.arguments[e]).value, b)) && (c[n(g)] = h, 
      d++);
    }
  }
  return 0 < d ? c : null;
}

function ba(a, b) {
  var d, e, f, g, h, c = {};
  if (!b) {
    return c;
  }
  if (a.variableDefinitions) {
    for (d = 0, e = a.variableDefinitions.length; d < e; d++) {
      c[g = n((f = a.variableDefinitions[d]).variable)] = void 0 === b[g] && f.defaultValue ? valueFromASTUntyped(f.defaultValue, b) : b[g];
    }
  }
  for (h in b) {
    h in c || (c[h] = b[h]);
  }
  return c;
}

function w(a, b) {
  var c = "";
  b.kind === Kind.INLINE_FRAGMENT ? c = a ? 'Inline Fragment on "' + a + '"' : "Inline Fragment" : b.kind === Kind.OPERATION_DEFINITION ? c = (b.name ? '"' + b.name.value + '"' : "Unnamed") + " " + b.operation : b.kind === Kind.FRAGMENT_DEFINITION && (c = '"' + b.name.value + '" Fragment');
  c && u.push(c);
}

function da() {
  return u.length ? "\n(Caused At: " + u.join(", ") + ")" : "";
}

function x(a, b, c) {
  if (!a) {
    throw a = b || "Minfied Error #" + c + "\n", "production" !== process.env.NODE_ENV && (a += da()), 
    (c = Error(a + "\nhttps://bit.ly/2XbVrpR#" + c)).name = "Graphcache Error", c;
  }
}

function A(a, b) {
  ca.has(a) || (console.warn(a + da() + "\nhttps://bit.ly/2XbVrpR#" + b), ca.add(a));
}

function B(a) {
  for (var b = 0; b < a.definitions.length; b++) {
    if (a.definitions[b].kind === Kind.OPERATION_DEFINITION) {
      return a.definitions[b];
    }
  }
  x(!1, "production" !== process.env.NODE_ENV ? "Invalid GraphQL document: All GraphQL documents must contain an OperationDefinitionnode for a query, subscription, or mutation." : "", 1);
}

function D(a) {
  var b, c, d;
  for (b = {}, c = 0; c < a.definitions.length; c++) {
    (d = a.definitions[c]).kind === Kind.FRAGMENT_DEFINITION && (b[n(d)] = d);
  }
  return b;
}

function ea(a, b) {
  var d, e, f, c = a.directives;
  if (!c) {
    return !0;
  }
  for (d = 0, e = c.length; d < e; d++) {
    if (("include" === (a = n(f = c[d])) || "skip" === a) && f.arguments && f.arguments[0] && "if" === n(f.arguments[0])) {
      return b = valueFromASTUntyped(f.arguments[0].value, b), "include" === a ? !!b : !b;
    }
  }
  return !0;
}

function fa(a) {
  for (var b = {}, c = 0; c < a.length; c++) {
    b[a[c].name] = a[c];
  }
  return b;
}

function ja(a, b, c) {
  if (ia.test(c)) {
    return !0;
  }
  return !!(a = oa(a, b, c)) && "NON_NULL" !== a.type.kind;
}

function pa(a, b, c) {
  if (!(a = oa(a, b, c))) {
    return !1;
  }
  return "LIST" === (a = "NON_NULL" === a.type.kind ? a.type.ofType : a.type).kind && "NON_NULL" !== a.ofType.kind;
}

function oa(a, b, c) {
  qa(a, b);
  a = a.types[b].fields[c];
  "production" !== process.env.NODE_ENV && (a || A("Invalid field: The field `" + c + "` does not exist on `" + b + "`, but the GraphQL document expects it to exist.\nTraversal will continue, however this may lead to undefined behavior!", 4));
  return a;
}

function qa(a, b) {
  x(a.types[b] && "OBJECT" === a.types[b].kind, "production" !== process.env.NODE_ENV ? "Invalid Object type: The type `" + b + "` is not an object in the defined schema, but the GraphQL document is traversing it." : "", 3);
}

function ra(a) {
  "production" !== process.env.NODE_ENV && A("Invalid resolver: `" + a + "` is not in the defined schema, but the `resolvers` option is referencing it.", 23);
}

function F(a, b) {
  return b ? a + "(" + stringifyVariables(b) + ")" : a;
}

function sa(a) {
  var b = a.indexOf("(");
  return -1 < b ? {
    fieldKey: a,
    fieldName: a.slice(0, b),
    arguments: JSON.parse(a.slice(b + 1, -1))
  } : {
    fieldKey: a,
    fieldName: a,
    arguments: null
  };
}

function ta(a, b) {
  return a.replace(/\./g, "%2e") + "." + b;
}

function ua(a) {
  var b = a.indexOf(".");
  return {
    entityKey: a.slice(0, b).replace(/%2e/g, "."),
    fieldKey: a = a.slice(b + 1)
  };
}

function I() {
  return Object.create(null);
}

function Q(a, b, c, d) {
  J = a;
  K = b;
  L = I();
  P = !!d;
  "production" !== process.env.NODE_ENV && (u.length = 0);
  c ? d || 0 < b.optimisticOrder.length ? (d || b.commutativeKeys.has(c) ? d && b.commutativeKeys.delete(c) : va(b, c), 
  M = c, -1 === b.optimisticOrder.indexOf(c) && b.optimisticOrder.unshift(c), b.refLock[c] || (b.refLock[c] = I(), 
  b.links.optimistic[c] = new Map, b.records.optimistic[c] = new Map)) : (M = null, 
  wa(b, c)) : M = null;
}

function R() {
  "production" !== process.env.NODE_ENV && Aa();
  var b = K, c = M;
  P = !1;
  M = null;
  if (c && -1 < b.optimisticOrder.indexOf(c)) {
    for (c = b.optimisticOrder.length; 0 <= --c && b.refLock[b.optimisticOrder[c]] && b.commutativeKeys.has(b.optimisticOrder[c]); ) {
      Ba(b.optimisticOrder[c]);
    }
  }
  L = K = J = null;
  "production" !== process.env.NODE_ENV && (u.length = 0);
  "test" === process.env.NODE_ENV || b.defer || (b.defer = !0, Promise.resolve().then((function a() {
    Q("read", b, null);
    K.gc.forEach(xa);
    !function za() {
      function a(a) {
        var f, c = ua(a), e = c.entityKey;
        void 0 !== (f = V(e, c = c.fieldKey)) ? b[a] = ":" + stringifyVariables(f) : void 0 !== (f = U(e, c)) ? b[a] = stringifyVariables(f) : b[a] = void 0;
      }
      if (K.storage) {
        P = !0;
        J = "read";
        var b = I();
        K.persist.forEach(a);
        P = !1;
        K.storage.writeData(b);
        K.persist.clear();
      }
    }();
    R();
    b.defer = !1;
  })));
}

function Aa() {
  x(null !== L, "production" !== process.env.NODE_ENV ? "Invalid Cache call: The cache may only be accessed or mutated duringoperations like write or query, or as part of its resolvers, updaters, or optimistic configs." : "", 2);
  return L;
}

function Ca(a, b, c, d) {
  var e = (a = M ? a.optimistic[M] : a.base).get(b);
  void 0 === e && a.set(b, e = I());
  void 0 !== d || M ? e[c] = d : delete e[c];
}

function Da(a, b, c) {
  var d, e, f, g, h, k;
  for (e = !P && "read" === J && M && K.commutativeKeys.has(M), f = 0, g = K.optimisticOrder.length; f < g; f++) {
    h = K.optimisticOrder[f];
    e = e && h !== M;
    if (!(!(k = a.optimistic[h]) || e && K.commutativeKeys.has(h) || P && "write" !== J && !K.commutativeKeys.has(h)) && void 0 !== (d = k.get(b)) && c in d) {
      return d[c];
    }
  }
  return void 0 !== (d = a.base.get(b)) ? d[c] : void 0;
}

function Ea(a, b, c, d) {
  var e = void 0 !== b[c] ? b[c] : 0;
  b = b[c] = e + d | 0;
  void 0 !== a && (0 >= b ? a.add(c) : 0 >= e && 0 < b && a.delete(c));
}

function Fa(a, b, c, d) {
  var e, f, g;
  if ("string" == typeof c) {
    Ea(a, b, c, d);
  } else if (Array.isArray(c)) {
    for (e = 0, f = c.length; e < f; e++) {
      (g = c[e]) && Ea(a, b, g, d);
    }
  }
}

function Ga(a, b, c) {
  if (void 0 !== c) {
    for (var d in c) {
      b.has(d) || (a.push(sa(d)), b.add(d));
    }
  }
}

function Ha(a, b, c, d) {
  var e, f, g;
  Ga(a, b, d.base.get(c));
  for (e = 0, f = K.optimisticOrder.length; e < f; e++) {
    void 0 !== (g = d.optimistic[K.optimisticOrder[e]]) && Ga(a, b, g.get(c));
  }
}

function xa(a, b, c) {
  var d, e;
  if (0 < (K.refCount[a] || 0)) {
    c.delete(a);
  } else {
    for (d in K.refLock) {
      if (0 < ((b = K.refLock[d])[a] || 0)) {
        return;
      }
      delete b[a];
    }
    delete K.refCount[a];
    c.delete(a);
    K.records.base.delete(a);
    if (d = K.links.base.get(a)) {
      K.links.base.delete(a);
      for (e in d) {
        Fa(c, K.refCount, d[e], -1);
      }
    }
  }
}

function S(a, b) {
  "__typename" !== b && (a !== K.queryRootKey ? L[a] = !0 : void 0 !== b && (L[a + "." + b] = !0));
}

function U(a, b) {
  S(a, b);
  return Da(K.records, a, b);
}

function V(a, b) {
  S(a, b);
  return Da(K.links, a, b);
}

function W(a, b, c) {
  S(a, b);
  !P && K.storage && K.persist.add(ta(a, b));
  Ca(K.records, a, b, c);
}

function Ia(a, b, c) {
  var e, f, g, d = K;
  if (M) {
    e = d.refLock[M] || (d.refLock[M] = I());
    f = d.links.optimistic[M];
  } else {
    e = d.refCount;
    f = d.links.base;
    g = d.gc;
  }
  f = (f = f && f.get(a)) && f[b];
  S(a, b);
  !P && K.storage && K.persist.add(ta(a, b));
  Ca(d.links, a, b, c);
  Fa(g, e, f, -1);
  Fa(g, e, c, 1);
}

function va(a, b) {
  var c = a.optimisticOrder.indexOf(b);
  -1 === c ? a.optimisticOrder.unshift(b) : a.commutativeKeys.has(b) || (Ja(a, b), 
  a.optimisticOrder.splice(c, 1), a.optimisticOrder.unshift(b));
  a.commutativeKeys.add(b);
}

function Ja(a, b) {
  a.refLock[b] && (delete a.refLock[b], delete a.records.optimistic[b], delete a.links.optimistic[b]);
}

function wa(a, b) {
  var c = a.optimisticOrder.indexOf(b);
  -1 < c && (a.optimisticOrder.splice(c, 1), a.commutativeKeys.delete(b));
  Ja(a, b);
}

function Ka(a, b) {
  for (var c in a) {
    Ia(b, c, a[c]);
  }
}

function La(a, b) {
  for (var c in a) {
    W(b, c, a[c]);
  }
}

function Ba(a) {
  var c, b = L;
  L = I();
  (c = K.links.optimistic[a]) && c.forEach(Ka);
  (c = K.records.optimistic[a]) && c.forEach(La);
  L = b;
  wa(K, a);
}

function Ma(a) {
  var b = K.links, c = K.records, d = [], e = new Set;
  S(a);
  Ha(d, e, a, b);
  Ha(d, e, a, c);
  return d;
}

function X(a, b, c, d, e, f) {
  return {
    store: a,
    variables: b,
    fragments: c,
    parent: {
      __typename: d
    },
    parentTypeName: d,
    parentKey: e,
    parentFieldKey: "",
    fieldName: "",
    partial: !1,
    optimistic: !!f
  };
}

function Oa(a, b, c, d, e, f) {
  Na.current = a;
  a.parent = b;
  a.parentTypeName = c;
  a.parentKey = d;
  a.parentFieldKey = e;
  a.fieldName = f;
}

function Pa(a, b, c, d) {
  if (!b) {
    return !1;
  }
  var e = a.typeCondition ? n(a.typeCondition) : null;
  if (!e || b === e) {
    return !0;
  }
  "production" !== process.env.NODE_ENV && A("Heuristic Fragment Matching: A fragment is trying to match against the `" + b + "` type, but the type condition is `" + e + "`. Since GraphQL allows for interfaces `" + e + "` may be aninterface.\nA schema needs to be defined for this match to be deterministic, otherwise the fragment will be matched heuristically!", 16);
  return !t(a).some((function(a) {
    if (a.kind !== Kind.FIELD) {
      return !1;
    }
    a = F(n(a), aa(a, d));
    return !(void 0 !== U(c, a) || void 0 !== V(c, a));
  }));
}

function Qa(a, b, c, d) {
  var e, f = 0;
  return function() {
    var g, h, k, l;
    if (void 0 !== e) {
      if (void 0 !== (g = e())) {
        return g;
      }
      e = void 0;
      "production" !== process.env.NODE_ENV && u.pop();
    }
    for (;f < c.length; ) {
      if (ea(g = c[f++], d.variables)) {
        if (g.kind === Kind.FIELD) {
          return g;
        }
        if (void 0 !== (g = g.kind === Kind.INLINE_FRAGMENT ? g : d.fragments[n(g)])) {
          if (d.store.schema) {
            h = d.store.schema;
            if (k = a) {
              (l = g.typeCondition ? n(g.typeCondition) : null) && k !== l ? h.types[l] && "OBJECT" === h.types[l].kind ? h = l === k : (x(h.types[l] && ("INTERFACE" === h.types[l].kind || "UNION" === h.types[l].kind), "production" !== process.env.NODE_ENV ? "Invalid Abstract type: The type `" + l + "` is not an Interface or Union type in the defined schema, but a fragment in the GraphQL document is using it as a type condition." : "", 5), 
              qa(h, k), h = h.isSubType(l, k)) : h = !0;
            } else {
              h = !1;
            }
          } else {
            h = Pa(g, a, b, d.variables);
          }
          if (h) {
            return "production" !== process.env.NODE_ENV && w(a, g), (e = Qa(a, b, t(g), d))();
          }
        }
      }
    }
  };
}

function Ra(a) {
  return void 0 === a ? null : a;
}

function Sa(a, b, c, d) {
  Q("write", a.data, d || null);
  a = Ta(a, b, c);
  R();
  return a;
}

function Ta(a, b, c) {
  var d = B(b.query), e = {
    data: c,
    dependencies: Aa()
  }, f = a.rootFields[d.operation];
  a = X(a, ba(d, b.variables), D(b.query), f, f);
  "production" !== process.env.NODE_ENV && w(f, d);
  Ua(a, f, t(d), c);
  "production" !== process.env.NODE_ENV && u.pop();
  return e;
}

function Ua(a, b, c, d) {
  var h, k, l, p, m, y, v, C, e = b === a.store.rootFields.query, f = !e && !!a.store.rootNames[b], g = f || e ? b : d.__typename;
  if (g) {
    f || e || !b || W(b, "__typename", g);
    c = Qa(g, b || g, c, a);
    for (;h = c(); ) {
      e = F(k = n(h), l = aa(h, a.variables));
      m = d[p = h.alias ? h.alias.value : n(h)];
      if ("production" !== process.env.NODE_ENV) {
        if (f || void 0 !== m) {
          if (a.store.schema && g && "__typename" !== k) {
            y = a.store.schema, v = g;
            ia.test(C = k) || oa(y, v, C);
          }
        } else {
          k = a.optimistic ? "\nYour optimistic result may be missing a field!" : "";
          l = void 0 === h.selectionSet ? "scalar (number, boolean, etc)" : "selection set";
          "production" !== process.env.NODE_ENV && A("Invalid undefined: The field at `" + e + "` is `undefined`, but the GraphQL query expects a " + l + " for this field." + k, 13);
          continue;
        }
      }
      if ("__typename" !== k) {
        if (a.optimistic && f) {
          if (!(m = a.store.optimisticMutations[k])) {
            continue;
          }
          Oa(a, d, g, g, e, k);
          m = d[p] = Ra(m(l || {}, a.store, a));
        }
        h.selectionSet ? b && !f ? (p = b + "." + e, Ia(b || g, e, h = Va(a, t(h), Ra(m), p))) : Va(a, t(h), Ra(m)) : b && !f && W(b || g, e, m);
        f && (Oa(a, d, g, g, g + "." + e, k), e = a.store.updates[g][k]) && (d[k] = m, e(d, l || {}, a.store, a));
      }
    }
  } else {
    "production" !== process.env.NODE_ENV && A("Couldn't find __typename when writing.\nIf you're writing to the cache manually have to pass a `__typename` property on each entity in your data.", 14);
  }
}

function Va(a, b, c, d) {
  var e, f, g, h;
  if (Array.isArray(c)) {
    for (e = Array(c.length), f = 0, g = c.length; f < g; f++) {
      h = Va(a, b, c[f], d ? d + "." + f : void 0);
      e[f] = h;
    }
    return e;
  }
  if (null === c) {
    return null;
  }
  e = a.store.keyOfEntity(c);
  f = c.__typename;
  "production" !== process.env.NODE_ENV && (!d || a.store.keys[c.__typename] || null !== e || "string" != typeof f || Wa.test(f) || A("Invalid key: The GraphQL query at the field at `" + d + "` has a selection set, but no key could be generated for the data at this field.\nYou have to request `id` or `_id` fields for all selection sets or create a custom `keys` config for `" + f + "`.\nEntities without keys will be embedded directly on the parent entity. If this is intentional, create a `keys` config for `" + f + "` that always returns null.", 15));
  Ua(a, d = e || d, b, c);
  return d || null;
}

function Y(a) {
  var b, c, d, e, f, g, h, k, l, p, m, y, v;
  this.keyOfField = F;
  this.resolveFieldByKey = this.resolve;
  a || (a = {});
  this.resolvers = a.resolvers || {};
  this.optimisticMutations = a.optimistic || {};
  this.keys = a.keys || {};
  d = "Query", e = "Mutation", f = "Subscription";
  if (a.schema) {
    g = this.schema = function ha(a) {
      function b(a) {
        switch (a.kind) {
         case "OBJECT":
         case "INTERFACE":
          return {
            name: a.name,
            kind: a.kind,
            interfaces: e(a.interfaces || []),
            fields: e(a.fields.map(c))
          };

         case "UNION":
          return {
            name: a.name,
            kind: a.kind,
            types: e(a.possibleTypes || [])
          };
        }
      }
      function c(a) {
        return {
          name: a.name,
          type: a.type,
          args: e(a.args)
        };
      }
      var d, e, f, g, h;
      a = a.__schema;
      for (d = {}, e = fa, f = 0; f < a.types.length; f++) {
        if ((g = a.types[f]) && g.name) {
          (h = b(g)) && (d[g.name] = h);
        }
      }
      return {
        query: a.queryType ? a.queryType.name : null,
        mutation: a.mutationType ? a.mutationType.name : null,
        subscription: a.subscriptionType ? a.subscriptionType.name : null,
        types: d,
        isSubType: function(a, b) {
          var c = d[a], e = d[b];
          return c && e ? "UNION" === c.kind ? !!c.types[b] : "OBJECT" !== c.kind && "OBJECT" === e.kind ? !!e.interfaces[a] : a === b : !1;
        }
      };
    }(a.schema);
    d = g.query || d;
    e = g.mutation || e;
    f = g.subscription || f;
  }
  this.updates = ((b = {})[e] = a.updates && a.updates.Mutation || {}, b[f] = a.updates && a.updates.Subscription || {}, 
  b);
  this.rootFields = {
    query: d,
    mutation: e,
    subscription: f
  };
  this.rootNames = ((c = {})[d] = "query", c[e] = "mutation", c[f] = "subscription", 
  c);
  a = d;
  this.data = {
    defer: !1,
    gc: new Set,
    persist: new Set,
    queryRootKey: a,
    refCount: I(),
    refLock: I(),
    links: {
      optimistic: I(),
      base: new Map
    },
    records: {
      optimistic: I(),
      base: new Map
    },
    commutativeKeys: new Set,
    optimisticOrder: [],
    storage: null
  };
  if (this.schema && "production" !== process.env.NODE_ENV) {
    a = this.schema;
    b = this.keys;
    if ("production" !== process.env.NODE_ENV) {
      for (h in b) {
        "production" !== process.env.NODE_ENV && (a.types[h] || A("Invalid Object type: The type `" + h + "` is not an object in the defined schema, but the `keys` option is referencing it.", 20));
      }
    }
    h = this.schema;
    a = this.updates;
    if ("production" !== process.env.NODE_ENV) {
      if (h.mutation) {
        b = h.types[h.mutation].fields;
        c = a[h.mutation] || {};
        for (k in c) {
          "production" !== process.env.NODE_ENV && void 0 === b[k] && A("Invalid mutation field: `" + k + "` is not in the defined schema, but the `updates.Mutation` option is referencing it.", 21);
        }
      }
      if (h.subscription) {
        k = h.types[h.subscription].fields;
        h = a[h.subscription] || {};
        for (l in h) {
          "production" !== process.env.NODE_ENV && void 0 === k[l] && A("Invalid subscription field: `" + l + "` is not in the defined schema, but the `updates.Subscription` option is referencing it.", 22);
        }
      }
    }
    l = this.schema;
    k = this.resolvers;
    if ("production" !== process.env.NODE_ENV) {
      for (p in k) {
        if ("Query" === p) {
          if (l.query) {
            h = l.types[l.query].fields;
            for (m in k.Query) {
              h[m] || ra("Query." + m);
            }
          } else {
            ra("Query");
          }
        } else if (l.types[p]) {
          if ("INTERFACE" === l.types[p].kind || "UNION" === l.types[p].kind) {
            "production" !== process.env.NODE_ENV && A("Invalid resolver: `" + p + "` does not match to a concrete type in the schema, but the `resolvers` option is referencing it. Implement the resolver for the types that " + ("UNION" === l.types[p].kind ? "make up the union" : "implement the interface") + " instead.", 26);
          } else {
            h = l.types[p].fields;
            for (y in k[p]) {
              h[y] || ra(p + "." + y);
            }
          }
        } else {
          ra(p);
        }
      }
    }
    m = this.schema;
    p = this.optimisticMutations;
    if ("production" !== process.env.NODE_ENV && m.mutation) {
      m = m.types[m.mutation].fields;
      for (v in p) {
        "production" !== process.env.NODE_ENV && (m[v] || A("Invalid optimistic mutation field: `" + v + "` is not a mutation field in the defined schema, but the `optimistic` option is referencing it.", 24));
      }
    }
  }
}

function Ya(a, b, c, d) {
  Q("read", a.data, c && d || null);
  a = Xa(a, b, c);
  R();
  return a;
}

function Xa(a, b, c) {
  var d = B(b.query), e = a.rootFields[d.operation], f = t(d);
  a = X(a, ba(d, b.variables), D(b.query), e, e);
  "production" !== process.env.NODE_ENV && w(e, d);
  c = e !== a.store.rootFields.query ? Za(a, e, f, c || {}) : Z(a, e, f, {});
  "production" !== process.env.NODE_ENV && u.pop();
  return {
    dependencies: Aa(),
    partial: a.partial || !c,
    data: c || null
  };
}

function Za(a, b, c, d) {
  var e, f, g;
  if ("string" != typeof d.__typename) {
    return d;
  }
  b = Qa(b, b, c, a);
  (c = {}).__typename = d.__typename;
  for (;e = b(); ) {
    g = d[f = e.alias ? e.alias.value : n(e)];
    e.selectionSet && null !== g ? (g = Ra(g), c[f] = $a(a, t(e), g)) : c[f] = g;
  }
  return c;
}

function $a(a, b, c) {
  if (Array.isArray(c)) {
    for (var d = Array(c.length), e = 0, f = c.length; e < f; e++) {
      d[e] = $a(a, b, c[e]);
    }
    return d;
  }
  if (null === c) {
    return null;
  }
  return null !== (d = a.store.keyOfEntity(c)) ? void 0 === (a = Z(a, d, b, {})) ? null : a : Za(a, c.__typename, b, c);
}

function Z(a, b, c, d, e) {
  var k, l, p, m, y, v, C, N, r, G, E, q, z, H, f = a.store, g = b === f.rootFields.query, h = e && f.keyOfEntity(e) || b;
  "production" !== process.env.NODE_ENV && !g && a.store.rootNames[h] && A("Invalid root traversal: A selection was being read on `" + h + "` which is an uncached root type.\nThe `" + a.store.rootFields.mutation + "` and `" + a.store.rootFields.subscription + "` types are special Operation Root Types and cannot be read back from the cache.", 25);
  if ("string" == typeof (b = g ? b : U(h, "__typename") || e && e.__typename)) {
    if (e && b !== e.__typename) {
      "production" !== process.env.NODE_ENV && A("Invalid resolver data: The resolver at `" + h + "` returned an invalid typename that could not be reconciled with the cache.", 8);
    } else {
      c = Qa(b, h, c, a);
      for (l = !1, p = !1; void 0 !== (k = c()); ) {
        m = n(k), y = aa(k, a.variables), v = k.alias ? k.alias.value : n(k), N = h + "." + (C = F(m, y)), 
        r = U(h, C), G = e ? e[m] : void 0, E = f.resolvers[b];
        if ("production" !== process.env.NODE_ENV && f.schema && b) {
          q = f.schema, z = b;
          ia.test(H = m) || oa(q, z, H);
        }
        q = void 0;
        if ("__typename" === m) {
          d[v] = b;
        } else {
          if (void 0 !== G && void 0 === k.selectionSet) {
            q = G;
          } else if (x(null !== J, "production" !== process.env.NODE_ENV ? "Invalid Cache call: The cache may only be accessed or mutated duringoperations like write or query, or as part of its resolvers, updaters, or optimistic configs." : "", 2), 
          "read" === J && E && "function" == typeof E[m]) {
            if (Oa(a, d, b, h, N, m), void 0 !== r && (d[v] = r), q = E[m](d, y || {}, f, a), 
            k.selectionSet && (q = ab(a, b, m, N, t(k), d[v], q)), f.schema && null === q && !ja(f.schema, b, m)) {
              return;
            }
          } else {
            k.selectionSet ? void 0 !== G ? q = ab(a, b, m, N, t(k), d[v], G) : void 0 !== (y = V(h, C)) ? q = bb(a, y, b, m, t(k), d[v]) : "object" == typeof r && null !== r && (q = r) : q = r;
          }
          if (void 0 === q && f.schema && ja(f.schema, b, m)) {
            p = !0, d[v] = null;
          } else {
            if (void 0 === q) {
              return;
            }
            l = !0;
            d[v] = q;
          }
        }
      }
      p && (a.partial = !0);
      return g && p && !l ? void 0 : d;
    }
  }
}

function ab(a, b, c, d, e, f, g) {
  var h, k, l, p, m;
  if (Array.isArray(g)) {
    h = !(h = a.store).schema || pa(h.schema, b, c);
    for (k = Array(g.length), l = 0, p = g.length; l < p; l++) {
      if (void 0 !== (m = ab(a, b, c, d + "." + l, e, null != f ? f[l] : void 0, g[l])) || h) {
        k[l] = void 0 !== m ? m : null;
      } else {
        return;
      }
    }
    return k;
  }
  if (null == g) {
    return g;
  }
  if (null === f) {
    return null;
  }
  if ("string" == typeof g || "object" == typeof g && "string" == typeof g.__typename) {
    return b = f || {}, "string" == typeof g ? Z(a, g, e, b) : Z(a, d, e, b, g);
  }
  "production" !== process.env.NODE_ENV && A("Invalid resolver value: The field at `" + d + "` is a scalar (number, boolean, etc), but the GraphQL query expects a selection set for this field.", 9);
}

function bb(a, b, c, d, e, f) {
  var g, h, k, l, p;
  if (Array.isArray(b)) {
    g = (g = a.store).schema && pa(g.schema, c, d);
    for (h = Array(b.length), k = 0, l = b.length; k < l; k++) {
      if (void 0 !== (p = bb(a, b[k], c, d, e, null != f ? f[k] : void 0)) || g) {
        h[k] = void 0 !== p ? p : null;
      } else {
        return;
      }
    }
    return h;
  }
  return null === b || null === f ? null : Z(a, b, e, f || {});
}

function cb(a, b) {
  return makeOperation(a.kind, a, _extends({}, a.context, {
    meta: _extends({}, a.context.meta, {
      cacheOutcome: b
    })
  }));
}

function db(a, b) {
  return makeOperation(a.kind, a, _extends({}, a.context, {
    requestPolicy: b
  }));
}

function eb(a) {
  return fromArray(a[0]);
}

function fb(a, b) {
  return a.push(b), a;
}

function gb(a) {
  return "query" === a.kind && "network-only" !== a.context.requestPolicy;
}

function hb(a) {
  return "query" !== a.kind || "network-only" === a.context.requestPolicy;
}

function ib(a) {
  return "miss" !== a.outcome || "cache-only" === a.operation.context.requestPolicy;
}

function jb(a) {
  return function(b) {
    function c(a, b) {
      var k, c = a.operation, d = a.error, f = a.extensions, g = c.key;
      if ("mutation" === c.kind) {
        h(b, T.get(g));
        T.delete(g);
      } else {
        va(z.data, c.key);
      }
      if (a.data) {
        if (h(b, Sa(z, c, a.data, g).dependencies), g = Ya(z, c, a.data, g), a.data = g.data, 
        "query" === c.kind) {
          h(b, k = g.dependencies);
        }
      } else {
        Q("read", z.data, c.key, void 0), R();
      }
      k && e(a.operation, k);
      return {
        data: a.data,
        error: d,
        extensions: f,
        operation: c
      };
    }
    function d(a) {
      var b = Ya(z, a), c = b.data ? b.partial ? "partial" : "hit" : "miss";
      e(a, b.dependencies);
      return {
        outcome: c,
        operation: a,
        data: b.data,
        dependencies: b.dependencies
      };
    }
    function e(a, b) {
      for (var c in b) {
        (ka[c] || (ka[c] = [])).push(a.key), la.set(a.key, a);
      }
    }
    function f(a) {
      var b, c, d, e, f, k, l, O, m, H;
      if ("query" === a.kind) {
        va(z.data, a.key);
      } else if ("teardown" === a.kind) {
        la.delete(a.key), Q("read", z.data, a.key, void 0), R();
      } else if ("mutation" === a.kind && "network-only" !== a.context.requestPolicy) {
        Q("write", (b = z).data, a.key, !0);
        c = B(a.query), d = Aa();
        x((e = b.rootFields[c.operation]) === b.rootFields.mutation, "production" !== process.env.NODE_ENV ? "writeOptimistic(...) was called with an operation that is not a mutation.\nThis case is unsupported and should never occur." : "", 10);
        "production" !== process.env.NODE_ENV && w(e, c);
        Ua(b = X(b, ba(c, a.variables), D(a.query), e, e, !0), e, t(c), {});
        "production" !== process.env.NODE_ENV && u.pop();
        R();
        a: {
          for (f in d) {
            c = !1;
            break a;
          }
          c = !0;
        }
        if (!c) {
          for (k in d) {
            ma[k] = !0;
          }
          T.set(a.key, d);
          h(k = new Set, d);
          g(a, k);
        }
      }
      d = makeOperation;
      k = a.kind;
      c = a.key;
      e = formatDocument(a.query);
      if (a.variables) {
        if (f = B(a.query), (b = a.variables) && f.variableDefinitions) {
          for (l = {}, O = 0, m = f.variableDefinitions.length; O < m; O++) {
            l[H = n(f.variableDefinitions[O].variable)] = b[H];
          }
          f = l;
        } else {
          f = void 0;
        }
      } else {
        f = a.variables;
      }
      return d(k, {
        key: c,
        query: e,
        variables: f
      }, a.context);
    }
    function g(a, b) {
      b.forEach((function(b) {
        var c, d;
        if (b !== a.key) {
          if (c = la.get(b)) {
            la.delete(b);
            d = "cache-first";
            ya.has(b) && (ya.delete(b), d = "cache-and-network");
            E.reexecuteOperation(db(c, d));
          }
        }
      }));
    }
    function h(a, b) {
      var c, d, e;
      if (b) {
        for (c in b) {
          if (b = ka[c]) {
            ka[c] = [];
            for (d = 0, e = b.length; d < e; d++) {
              a.add(b[d]);
            }
          }
        }
      }
    }
    function k(a) {
      for (var b in a) {
        if (ma[b]) {
          return !0;
        }
      }
      return !1;
    }
    function p(a) {
      "production" !== process.env.NODE_ENV && q({
        type: "cacheMiss",
        message: "The result could not be retrieved from the cache",
        operation: a.operation,
        source: "cacheExchange"
      });
      return cb(a.operation, "miss");
    }
    function m(a) {
      return "miss" === a.outcome && "cache-only" !== a.operation.context.requestPolicy && !k(a.dependencies);
    }
    function y(a) {
      var b = a.operation, c = a.outcome, d = a.dependencies, e = {
        operation: cb(b, c),
        data: a.data,
        error: a.error,
        extensions: a.extensions
      };
      if ("cache-and-network" === b.context.requestPolicy || "cache-first" === b.context.requestPolicy && "partial" === c) {
        e.stale = !0, k(d) ? "cache-and-network" === b.context.requestPolicy && ya.add(b.key) : E.reexecuteOperation(db(b, "network-only"));
      }
      "production" !== process.env.NODE_ENV && q({
        type: "cacheHit",
        message: "A requested operation was found and returned from the cache.",
        operation: a.operation,
        data: {
          value: e
        },
        source: "cacheExchange"
      });
      return e;
    }
    function v(a) {
      var b = new Set, d = c(a, b);
      g(a.operation, b);
      return d;
    }
    function C(a) {
      return !T.has(a.operation.key);
    }
    function N(a) {
      var b, d, e;
      if (na.push(a) < T.size) {
        return empty;
      }
      for (b = 0; b < na.length; b++) {
        va(z.data, na[b].operation.key);
      }
      for (d in ma) {
        delete ma[d];
      }
      b = [];
      d = new Set;
      for (;e = na.shift(); ) {
        b.push(c(e, d));
      }
      g(a.operation, d);
      return fromArray(b);
    }
    function r(a) {
      return T.has(a.operation.key);
    }
    var H, T, na, la, ma, ya, ka, G = b.forward, E = b.client, q = b.dispatchDebug, z = new Y(a);
    a && a.storage && (H = a.storage.readData().then((function l(b) {
      var e, f, g, h, c = z.data, d = a.storage;
      Q("write", c, null);
      for (e in b) {
        if (void 0 !== (f = b[e])) {
          h = (g = ua(e)).entityKey;
          g = g.fieldKey;
          ":" === f[0] ? Ia(h, g, JSON.parse(f.slice(1))) : W(h, g, JSON.parse(f));
        }
      }
      R();
      c.storage = d;
    })));
    T = new Map, na = [], la = new Map, ma = I(), ya = new Set, ka = I();
    return function(a) {
      var b, c;
      a = share(a);
      b = H ? mergeMap(eb)(take(1)(combine(scan(fb, [])(a), fromPromise(H)))) : empty;
      b = share(concat([ b, a ]));
      a = share(map(d)(filter(gb)(b)));
      b = filter(hb)(b);
      c = map(p)(filter(m)(a));
      a = map(y)(filter(ib)(a));
      c = share(G(map(f)(merge([ b, c ]))));
      b = map(v)(filter(C)(c));
      c = mergeMap(N)(filter(r)(c));
      return merge([ b, c, a ]);
    };
  };
}

function kb(a) {
  return a && a.networkError && !a.response && ("undefined" != typeof navigator && !1 === navigator.onLine || /request failed|failed to fetch|network\s?error/i.test(a.networkError.message));
}

function offlineExchange(a) {
  return function(b) {
    function e(a) {
      var b, c, d, e, f;
      if (b = "mutation" === a.operation.kind && kb(a.error)) {
        a: {
          b = N;
          d = (c = a.operation).variables || I(), e = D(c.query);
          c = [].concat(t(B(c.query)));
          for (;f = c.pop(); ) {
            if (ea(f, d)) {
              if (f.kind !== Kind.FIELD) {
                (f = f.kind === Kind.INLINE_FRAGMENT ? f : e[n(f)]) && c.push.apply(c, t(f));
              } else if (b[n(f)]) {
                b = !0;
                break a;
              }
            }
          }
          b = !1;
        }
      }
      return b ? (r.push(a.operation), G(), !1) : !0;
    }
    function h(a) {
      return "query" === a.operation.kind && kb(a.error) ? (C(db(a.operation, "cache-only")), 
      r.push(a.operation), !1) : !0;
    }
    var p, m, y, v, C, N, r, G, E, q, z, l = a.storage;
    if (l && l.onOnline && l.readMetadata && l.writeMetadata) {
      p = b.forward, m = b.client;
      b = b.dispatchDebug;
      y = makeSubject(), v = y.source, C = y.next, N = a.optimistic || {}, r = [], G = function c() {
        var a, b, c;
        for (a = [], b = 0; b < r.length; b++) {
          "mutation" === (c = r[b]).kind && a.push({
            query: print(c.query),
            variables: c.variables
          });
        }
        l.writeMetadata(a);
      }, E = !1;
      l.onOnline(q = function d() {
        var a, b;
        if (!E) {
          E = !0;
          for (a = 0; a < r.length; a++) {
            "mutation" === (b = r[a]).kind && C(makeOperation("teardown", b));
          }
          for (a = 0; a < r.length; a++) {
            m.reexecuteOperation(r[a]);
          }
          r.length = 0;
          E = !1;
          G();
        }
      });
      l.readMetadata().then((function g(a) {
        if (a) {
          for (var b = 0; b < a.length; b++) {
            r.push(m.createRequestOperation("mutation", createRequest(a[b].query, a[b].variables)));
          }
          q();
        }
      }));
      z = jb(a)({
        client: m,
        dispatchDebug: b,
        forward: function f(a) {
          return filter(e)(p(a));
        }
      });
      return function k(a) {
        a = share(a);
        a = merge([ v, a ]);
        return filter(h)(z(a));
      };
    }
    return jb(a)(b);
  };
}

var ca, u, ia, J, K, L, M, P, Na, Wa;

import { share, mergeMap, take, combine, scan, fromPromise, empty, concat, map, filter, merge, fromArray, makeSubject } from "wonka";

import { _ as _extends } from "./5301ccd2.mjs";

import { stringifyVariables, createRequest, formatDocument, makeOperation } from "@urql/core";

import { Kind } from "graphql/language/kinds.mjs";

import { valueFromASTUntyped } from "graphql/utilities/valueFromASTUntyped.mjs";

import { print } from "graphql/language/printer.mjs";

ca = new Set, u = [];

ia = /^__/;

J = null, K = null, L = null, M = null, P = !1;

Na = {
  current: null
};

Wa = /^__|PageInfo|(Connection|Edge)$/;

Y.prototype.keyOfEntity = function(a) {
  if (Na.current && a === Na.current.parent) {
    return Na.current.parentKey;
  }
  if (null == a || "string" == typeof a) {
    return a || null;
  }
  if (!a.__typename) {
    return null;
  }
  if (this.rootNames[a.__typename]) {
    return a.__typename;
  }
  var b;
  this.keys[a.__typename] ? b = this.keys[a.__typename](a) : null != a.id ? b = "" + a.id : null != a._id && (b = "" + a._id);
  return b ? a.__typename + ":" + b : null;
};

Y.prototype.resolve = function(a, b, c) {
  b = F(b, c);
  if (!(a = this.keyOfEntity(a))) {
    return null;
  }
  return void 0 !== (c = U(a, b)) ? c : V(a, b) || null;
};

Y.prototype.invalidate = function(a, b, c) {
  var e, d = this.keyOfEntity(a);
  x(d, "production" !== process.env.NODE_ENV ? "object" == "Can't generate a key for invalidate(...).\nYou have to pass an id or _id field or create a custom `keys` field for `" + typeof a ? a.__typename : a + "`." : "", 19);
  a = b ? [ {
    fieldKey: F(b, c)
  } ] : Ma(d);
  b = 0;
  for (c = a.length; b < c; b++) {
    void 0 !== V(d, e = a[b].fieldKey) ? Ia(d, e, void 0) : W(d, e, void 0);
  }
};

Y.prototype.inspectFields = function(a) {
  return (a = this.keyOfEntity(a)) ? Ma(a) : [];
};

Y.prototype.updateQuery = function(a, b) {
  (a = createRequest(a.query, a.variables)).query = formatDocument(a.query);
  null !== (b = b(this.readQuery(a))) && Ta(this, a, b);
};

Y.prototype.readQuery = function(a) {
  (a = createRequest(a.query, a.variables)).query = formatDocument(a.query);
  return Xa(this, a).data;
};

Y.prototype.readFragment = function(a, b, c) {
  var d, e;
  if (d = (a = D(a = formatDocument(a)))[(d = Object.keys(a))[0]]) {
    e = d.typeCondition.name.value;
    "string" == typeof b || b.__typename || (b.__typename = e);
    (b = this.keyOfEntity(b)) ? ("production" !== process.env.NODE_ENV && w(e, d), c = Z(c = X(this, c || {}, a, e, b), b, t(d), {}) || null, 
    "production" !== process.env.NODE_ENV && u.pop()) : ("production" !== process.env.NODE_ENV && A("Can't generate a key for readFragment(...).\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `" + e + "`.", 7), 
    c = null);
  } else {
    "production" !== process.env.NODE_ENV && A("readFragment(...) was called with an empty fragment.\nYou have to call it with at least one fragment in your GraphQL document.", 6), 
    c = null;
  }
  return c;
};

Y.prototype.writeFragment = function(a, b, c) {
  var d, e, f;
  if (d = (a = D(a = formatDocument(a)))[(d = Object.keys(a))[0]]) {
    b = _extends({}, {
      __typename: e = d.typeCondition.name.value
    }, b);
    (f = this.keyOfEntity(b)) ? ("production" !== process.env.NODE_ENV && w(e, d), Ua(c = X(this, c || {}, a, e, f), f, t(d), b), 
    "production" !== process.env.NODE_ENV && u.pop()) : "production" !== process.env.NODE_ENV && A("Can't generate a key for writeFragment(...) data.\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `" + e + "`.", 12);
  } else {
    "production" !== process.env.NODE_ENV && A("writeFragment(...) was called with an empty fragment.\nYou have to call it with at least one fragment in your GraphQL document.", 11);
  }
};

export { Y as Store, jb as cacheExchange, offlineExchange, Ya as query, Sa as write };
//# sourceMappingURL=urql-exchange-graphcache.mjs.map
