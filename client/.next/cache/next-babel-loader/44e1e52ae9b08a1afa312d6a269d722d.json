{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/lucaguglielmi/Desktop/Reddit-Clone/RedditClone/client/src/components/Organisms/RegisterForm.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Box, Button, Heading } from '@chakra-ui/core';\nimport { Formik, Form } from 'formik';\nimport { useRouter } from 'next/router';\nimport { useRegisterMutation } from '../../generated/graphql';\nimport { toErrorMap } from '../../utils/toErrorMap';\nimport { InputField } from '../Atoms/InputField';\nimport { Wrapper } from '../Atoms/Wrapper';\nexport var RegisterForm = function RegisterForm(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 2),\n      register = _useRegisterMutation2[1];\n\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    size: \"xl\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, \"Register\"), __jsx(Formik, {\n    initialValues: {\n      handle: '',\n      password: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var _response$data, _response$data2;\n\n        var setErrors, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setErrors = _ref2.setErrors;\n                _context.next = 3;\n                return register(values);\n\n              case 3:\n                response = _context.sent;\n\n                if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.register.user) {\n                  router.push('/');\n                } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.register.errors) {\n                  setErrors(toErrorMap(response.data.register.errors));\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, function (_ref4) {\n    var isSubmitting = _ref4.isSubmitting;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }, __jsx(Box, {\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, __jsx(InputField, {\n      name: \"handle\",\n      placeholder: \"@jesusfucksworth\",\n      label: \"handle\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }\n    })), __jsx(Box, {\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, __jsx(InputField, {\n      name: \"password\",\n      placeholder: \"password\",\n      label: \"password\",\n      type: \"password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }\n    })), __jsx(Button, {\n      type: \"submit\",\n      mt: 4,\n      isLoading: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, \"Register\"));\n  }));\n};\n\n_s(RegisterForm, \"1d3EIgmU4Efp8mYKr9OS4WrCiXQ=\", false, function () {\n  return [useRouter, useRegisterMutation];\n});\n\n_c = RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["/Users/lucaguglielmi/Desktop/Reddit-Clone/RedditClone/client/src/components/Organisms/RegisterForm.tsx"],"names":["React","Box","Button","Heading","Formik","Form","useRouter","useRegisterMutation","toErrorMap","InputField","Wrapper","RegisterForm","router","register","handle","password","values","setErrors","response","data","user","push","errors","isSubmitting"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,OAAtB,QAAqC,iBAArC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AAIA,OAAO,IAAMC,YAAyC,GAAG,SAA5CA,YAA4C,OAAQ;AAAA;;AAAA;;AAC/D,MAAMC,MAAM,GAAGN,SAAS,EAAxB;;AAD+D,6BAE1CC,mBAAmB,EAFuB;AAAA;AAAA,MAEtDM,QAFsD;;AAG/D,SACE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAS,IAAA,EAAE,EAAC,IAAZ;AAAiB,IAAA,IAAI,EAAC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAIE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEC,MAAAA,MAAM,EAAE,EAAV;AAAcC,MAAAA,QAAQ,EAAE;AAAxB,KADjB;AAEE,IAAA,QAAQ;AAAA,2EAAE,iBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBC,gBAAAA,SAAjB,SAAiBA,SAAjB;AAAA;AAAA,uBACeJ,QAAQ,CAACG,MAAD,CADvB;;AAAA;AACFE,gBAAAA,QADE;;AAER,sCAAIA,QAAQ,CAACC,IAAb,2CAAI,eAAeN,QAAf,CAAwBO,IAA5B,EAAkC;AAChCR,kBAAAA,MAAM,CAACS,IAAP,CAAY,GAAZ;AACD,iBAFD,MAEO,uBAAIH,QAAQ,CAACC,IAAb,4CAAI,gBAAeN,QAAf,CAAwBS,MAA5B,EAAoC;AACzCL,kBAAAA,SAAS,CAACT,UAAU,CAACU,QAAQ,CAACC,IAAT,CAAcN,QAAd,CAAuBS,MAAxB,CAAX,CAAT;AACD;;AANO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWG;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,WACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,WAAW,EAAC,kBAFd;AAGE,MAAA,KAAK,EAAC,QAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAQE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,WAAW,EAAC,UAFd;AAGE,MAAA,KAAK,EAAC,UAHR;AAIE,MAAA,IAAI,EAAC,UAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CARF,EAgBE,MAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,EAAE,EAAE,CAA1B;AAA6B,MAAA,SAAS,EAAEA,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBF,CADD;AAAA,GAXH,CAJF,CADF;AAyCD,CA5CM;;GAAMZ,Y;UACIL,S,EACMC,mB;;;KAFVI,Y","sourcesContent":["import React from 'react';\nimport { Box, Button, Heading } from '@chakra-ui/core';\nimport { Formik, Form } from 'formik';\nimport { useRouter } from 'next/router';\nimport { useRegisterMutation } from '../../generated/graphql';\nimport { toErrorMap } from '../../utils/toErrorMap';\nimport { InputField } from '../Atoms/InputField';\nimport { Wrapper } from '../Atoms/Wrapper';\n\ninterface RegisterFormProps {}\n\nexport const RegisterForm: React.FC<RegisterFormProps> = ({}) => {\n  const router = useRouter();\n  const [, register] = useRegisterMutation();\n  return (\n    <Wrapper variant='small'>\n      <Heading as='h2' size='xl'>\n        Register\n      </Heading>\n      <Formik\n        initialValues={{ handle: '', password: '' }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await register(values);\n          if (response.data?.register.user) {\n            router.push('/');\n          } else if (response.data?.register.errors) {\n            setErrors(toErrorMap(response.data.register.errors));\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <Box mt={4}>\n              <InputField\n                name='handle'\n                placeholder='@jesusfucksworth'\n                label='handle'\n              />\n            </Box>\n            <Box mt={4}>\n              <InputField\n                name='password'\n                placeholder='password'\n                label='password'\n                type='password'\n              />\n            </Box>\n            <Button type='submit' mt={4} isLoading={isSubmitting}>\n              Register\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}