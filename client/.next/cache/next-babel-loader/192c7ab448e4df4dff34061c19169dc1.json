{"ast":null,"code":"var _jsxFileName = \"/Users/lucaguglielmi/Desktop/Reddit-Clone/RedditClone/client/src/components/Organisms/RegisterForm.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Box, Button, Heading } from '@chakra-ui/core';\nimport { Formik, Form } from 'formik';\nimport { useRouter } from 'next/router';\nimport { useRegisterMutation } from '../../generated/graphql';\nimport { toErrorMap } from '../../utils/toErrorMap';\nimport { InputField } from '../Atoms/InputField';\nimport { Wrapper } from '../Atoms/Wrapper';\nexport const RegisterForm = ({}) => {\n  const router = useRouter();\n  const [, register] = useRegisterMutation();\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    size: \"xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, \"Register\"), __jsx(Formik, {\n    initialValues: {\n      handle: '',\n      password: ''\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      var _response$data, _response$data2;\n\n      const response = await register(values);\n\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.register.user) {\n        router.push('/');\n      } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.register.errors) {\n        setErrors(toErrorMap(response.data.register.errors));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, __jsx(InputField, {\n    name: \"handle\",\n    placeholder: \"@jesusfucksworth\",\n    label: \"handle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, __jsx(InputField, {\n    name: \"password\",\n    placeholder: \"password\",\n    label: \"password\",\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 15\n    }\n  })), __jsx(Button, {\n    type: \"submit\",\n    mt: 4,\n    isLoading: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"Register\"))));\n};","map":{"version":3,"sources":["/Users/lucaguglielmi/Desktop/Reddit-Clone/RedditClone/client/src/components/Organisms/RegisterForm.tsx"],"names":["React","Box","Button","Heading","Formik","Form","useRouter","useRegisterMutation","toErrorMap","InputField","Wrapper","RegisterForm","router","register","handle","password","values","setErrors","response","data","user","push","errors","isSubmitting"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,OAAtB,QAAqC,iBAArC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AAIA,OAAO,MAAMC,YAAyC,GAAG,CAAC,EAAD,KAAQ;AAC/D,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAM,GAAGO,QAAH,IAAeN,mBAAmB,EAAxC;AACA,SACE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAS,IAAA,EAAE,EAAC,IAAZ;AAAiB,IAAA,IAAI,EAAC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAIE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEO,MAAAA,MAAM,EAAE,EAAV;AAAcC,MAAAA,QAAQ,EAAE;AAAxB,KADjB;AAEE,IAAA,QAAQ,EAAE,OAAOC,MAAP,EAAe;AAAEC,MAAAA;AAAF,KAAf,KAAiC;AAAA;;AACzC,YAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACG,MAAD,CAA/B;;AACA,4BAAIE,QAAQ,CAACC,IAAb,2CAAI,eAAeN,QAAf,CAAwBO,IAA5B,EAAkC;AAChCR,QAAAA,MAAM,CAACS,IAAP,CAAY,GAAZ;AACD,OAFD,MAEO,uBAAIH,QAAQ,CAACC,IAAb,4CAAI,gBAAeN,QAAf,CAAwBS,MAA5B,EAAoC;AACzCL,QAAAA,SAAS,CAACT,UAAU,CAACU,QAAQ,CAACC,IAAT,CAAcN,QAAd,CAAuBS,MAAxB,CAAX,CAAT;AACD;AACF,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,WAAW,EAAC,kBAFd;AAGE,IAAA,KAAK,EAAC,QAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAQE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,KAAK,EAAC,UAHR;AAIE,IAAA,IAAI,EAAC,UAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CARF,EAgBE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,EAAE,EAAE,CAA1B;AAA6B,IAAA,SAAS,EAAEA,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBF,CAZJ,CAJF,CADF;AAyCD,CA5CM","sourcesContent":["import React from 'react';\nimport { Box, Button, Heading } from '@chakra-ui/core';\nimport { Formik, Form } from 'formik';\nimport { useRouter } from 'next/router';\nimport { useRegisterMutation } from '../../generated/graphql';\nimport { toErrorMap } from '../../utils/toErrorMap';\nimport { InputField } from '../Atoms/InputField';\nimport { Wrapper } from '../Atoms/Wrapper';\n\ninterface RegisterFormProps {}\n\nexport const RegisterForm: React.FC<RegisterFormProps> = ({}) => {\n  const router = useRouter();\n  const [, register] = useRegisterMutation();\n  return (\n    <Wrapper variant='small'>\n      <Heading as='h2' size='xl'>\n        Register\n      </Heading>\n      <Formik\n        initialValues={{ handle: '', password: '' }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await register(values);\n          if (response.data?.register.user) {\n            router.push('/');\n          } else if (response.data?.register.errors) {\n            setErrors(toErrorMap(response.data.register.errors));\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <Box mt={4}>\n              <InputField\n                name='handle'\n                placeholder='@jesusfucksworth'\n                label='handle'\n              />\n            </Box>\n            <Box mt={4}>\n              <InputField\n                name='password'\n                placeholder='password'\n                label='password'\n                type='password'\n              />\n            </Box>\n            <Button type='submit' mt={4} isLoading={isSubmitting}>\n              Register\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}